variables:
  vmImageName: 'ubuntu-latest'

resources:
  repositories:
  - repository: ApimLabTerraform
    type: git
    trigger:
      - main
      - release/*
    name: QRM DevOps/apim-lab-terraform-github

pool:
  vmImage: $(vmImageName)

stages:
  - stage: LabCI
    displayName: Lab CI
    jobs:
    - job: Build
      displayName:  Build
      steps:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)'
          artifact: drop
  - stage: LabCD
    displayName: Lab CD
    jobs:
    - job: Plan
      displayName:  Lab Plan
      steps:
      - download: current
        artifact: drop
      # - task: CopyFiles@2
      #   displayName: 'Copy Files'
      #   inputs:
      #     SourceFolder: '$(Pipeline.Workspace)/$(initials)-apim-lab-terraform/drop'
      #     TargetFolder: '$(System.DefaultWorkingDirectory)'
      - script: |
          cd '$(Pipeline.Workspace)/drop/apim-lab-terraform/env/lab)'
          printf 'terraform {  \nbackend "azurerm" {  \nstorage_account_name="lab$(initials)prereqsa" \ncontainer_name="tfstate" \nkey="lab.terraform.tfstate" \nresource_group_name="lab-$(initials)-prereq-rg" \n}\n}' >> backend.tf
        displayName: 'Setup Backend Config'
      - task: Docker@1
        displayName: 'Terraform Init'
        inputs:
          command: 'Run an image'
          imageName: 'hashicorp/terraform:1.3.8'
          qualifyImageName: false
          volumes: '$(Pipeline.Workspace)/drop/apim-lab-terraform:/code'
          envVars: |
            ARM_CLIENT_ID=$(terraform-app-id)
            ARM_CLIENT_SECRET=$(terraform-key)
            ARM_SUBSCRIPTION_ID=$(env-subscription-id)
            ARM_TENANT_ID=$(tenant-id)
          workingDirectory: '/code/env/lab'
          containerCommand: 'init -no-color'
          runInBackground: false
      - task: Docker@1
        displayName: 'Terraform Plan'
        inputs:
          command: 'Run an image'
          imageName: 'hashicorp/terraform:1.3.8'
          qualifyImageName: false
          volumes: '$(Pipeline.Workspace)/drop/apim-lab-terraform:/code'
          envVars: |
            ARM_CLIENT_ID=$(terraform-app-id)
            ARM_CLIENT_SECRET=$(terraform-key)
            ARM_SUBSCRIPTION_ID=$(subscription-id)
            ARM_TENANT_ID=$(tenant-id)
          workingDirectory: '/code/env/lab'
          containerCommand: 'plan -no-color'
          runInBackground: false     
    - job: ManualApproval
      dependsOn: Plan
      pool: 'server'
      displayName:  Lab Deploy Approval
      steps: 
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            $(adminEmail)
          instructions: 'Please validate the build configuration and resume' 
          onTimeout: 'reject'
    - job: Deploy
      dependsOn: ManualApproval
      displayName:  Lab Deploy 
      steps: 
      - download: current
        artifact: drop
      - task: Docker@1
        displayName: 'Terraform Plan'
        inputs:
          command: 'Run an image'
          imageName: 'hashicorp/terraform:1.3.8'
          qualifyImageName: false
          volumes: '$(Pipeline.Workspace)/drop/apim-lab-terraform:/code'
          envVars: |
            ARM_CLIENT_ID=$(terraform-app-id)
            ARM_CLIENT_SECRET=$(terraform-key)
            ARM_SUBSCRIPTION_ID=$(subscription-id)
            ARM_TENANT_ID=$(tenant-id)
          containerCommand: 'apply -auto-approve -no-color'
          runInBackground: false      